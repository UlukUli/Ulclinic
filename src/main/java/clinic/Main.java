package clinic;

import java.sql.*;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        System.out.println("üîÉ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
        DatabaseInitializer.initialize();

// ----- –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) -----
// deleteAllMedicalHistoryFor("patient1");
// debugShowAllTasks();
// deleteAllTasks();
// deleteAllProcedures();
// deleteAllStaff();

        String[] user = AuthService.login();

        if (user == null) {
            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.");
            return;
        }

        String name = user[0];
        String role = user[1];
        String login = user[2];

        System.out.println("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + name + " (" + role + ")");

        switch (role) {
            case "doctor" -> showDoctorMenu(name);
            case "nurse" -> showMedAssistantMenu(name);
            case "chief" -> showMainDoctorMenu(name);
            case "patient" -> showPatientMenu(login);
            default -> System.out.println("‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å.");
        }
    }

    public static void showDoctorMenu(String name) {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ–∫—Ç–æ—Ä " + name + "!");
            System.out.println("1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤");
            System.out.println("2. –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤");
            System.out.println("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—É—á–µ–Ω–∏–π –¥–ª—è –º–µ–¥—Å–µ—Å—Ç–µ—Ä");
            System.out.println("4. –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Ä—É—á–µ–Ω–∏–µ –¥–ª—è –º–µ–¥—Å–µ—Å—Ç–µ—Ä");
            System.out.println("5. –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ—Ä—É—á–µ–Ω–∏—è");
            System.out.println("6. –ü–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞");
            System.out.println("7. –î–∞—Ç—å –¥–∏–∞–≥–Ω–æ–∑ –ø–∞—Ü–∏–µ–Ω—Ç—É");
            System.out.println("8. –í—ã—Ö–æ–¥");
            System.out.print("–í–∞—à –≤—ã–±–æ—Ä: ");

            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1 -> showAllPatients();
                case 2 -> showPatientCount();
                case 3 -> showActiveNurseTasks();
                case 4 -> assignTaskForAssistant();
                case 5 -> showCompletedNurseTasks();
                case 6 -> findPatient();
                case 7 -> addDiagnosis();
                case 8 -> {
                    System.out.println("–í—ã—Ö–æ–¥...");
                    return;
                }
                default -> System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
            }
        }
    }
    public static void showAllPatients() {
        String sql = "SELECT login, birth_date FROM patients";

        try (Connection conn = DatabaseManager.connect();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {

            System.out.println("\nüìã –°–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:");
            boolean found = false;
            while (rs.next()) {
                System.out.println("- " + rs.getString("login") + " | –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: " + rs.getString("birth_date"));
                found = true;
            }
            if (!found) System.out.println("–ü–∞—Ü–∏–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");

        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: " + e.getMessage());
        }
    }
    public static void addDiagnosis() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–∞—Ü–∏–µ–Ω—Ç–∞: ");
        String login = scanner.nextLine();

// –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç
        String checkSql = "SELECT * FROM patients WHERE login = ?";
        try (Connection conn = DatabaseManager.connect();
             PreparedStatement checkStmt = conn.prepareStatement(checkSql)) {

            checkStmt.setString(1, login);
            ResultSet rs = checkStmt.executeQuery();
            if (!rs.next()) {
                System.out.println("‚ùå –ü–∞—Ü–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return;
            }

        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞: " + e.getMessage());
            return;
        }

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑: ");
        String diagnosis = scanner.nextLine();
        String date = java.time.LocalDate.now().toString();

        String description = null;
        int treatmentDays = 0;

// –ß—Ç–µ–Ω–∏–µ diagnos.txt
        try (Scanner fileScanner = new Scanner(new java.io.File("diagnos.txt"))) {
            while (fileScanner.hasNextLine()) {
                String line = fileScanner.nextLine();
                String[] parts = line.split("=");
                if (parts.length == 2) {
                    String name = parts[0].trim().toLowerCase();
                    String[] info = parts[1].split(";");
                    if (name.equals(diagnosis.trim().toLowerCase()) && info.length == 2) {
                        description = info[0].trim();
                        treatmentDays = Integer.parseInt(info[1].trim());
                        break;
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ diagnos.txt: " + e.getMessage());
            return;
        }

        if (description == null) {
            System.out.println("‚ö† –î–∏–∞–≥–Ω–æ–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ diagnos.txt.");
            return;
        }

// –ó–∞–ø–∏—Å—å –≤ medical_history
        String insertSql = "INSERT INTO medical_history (patient_login, date, diagnosis) VALUES (?, ?, ?)";
        try (Connection conn = DatabaseManager.connect();
             PreparedStatement insertStmt = conn.prepareStatement(insertSql)) {

            insertStmt.setString(1, login);
            insertStmt.setString(2, date);
            insertStmt.setString(3, diagnosis);
            insertStmt.executeUpdate();

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–µ—á–µ–Ω–∏—è
            PreparedStatement updateStmt = conn.prepareStatement(
                    "UPDATE patients SET treatment_days = ? WHERE login = ?");
            updateStmt.setInt(1, treatmentDays);
            updateStmt.setString(2, login);
            updateStmt.executeUpdate();

            System.out.println("‚úÖ –î–∏–∞–≥–Ω–æ–∑ –¥–æ–±–∞–≤–ª–µ–Ω: " + diagnosis);
            System.out.println("ü©∫ –ù–∞–∑–Ω–∞—á–µ–Ω–æ –ª–µ—á–µ–Ω–∏–µ: " + description + " (" + treatmentDays + " –¥–Ω–µ–π)");

        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ–∑–∞: " + e.getMessage());
        }
    }

    public static void findPatient() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–∏–ª–∏ —á–∞—Å—Ç—å): ");
        String namePart = scanner.nextLine();

        String sql = """
SELECT users.name, patients.birth_date
FROM users
JOIN patients ON users.login = patients.login
WHERE users.name LIKE ?
""";

        try (Connection conn = DatabaseManager.connect();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, "%" + namePart + "%");
            ResultSet rs = stmt.executeQuery();

            System.out.println("üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:");
            boolean found = false;
            while (rs.next()) {
                System.out.println("- " + rs.getString("name") + " | " + rs.getString("birth_date"));
                found = true;
            }
            if (!found) {
                System.out.println("–ü–∞—Ü–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
            }

        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞: " + e.getMessage());
        }
    }
    public static void assignTaskForAssistant() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ä—É—á–µ–Ω–∏—è –¥–ª—è –º–µ–¥—Å–µ—Å—Ç—Ä—ã: ");
        String description = scanner.nextLine();

        String nurseLogin = "nurse1"; // –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
        String doctorLogin = "doc1"; // –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        String date = java.time.LocalDate.now().toString();

        String sql = "INSERT INTO tasks (description, doctor_login, nurse_login, status, date_assigned) " +
                "VALUES (?, ?, ?, 'pending', ?)";

        try (Connection conn = DatabaseManager.connect();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, description);
            stmt.setString(2, doctorLogin);
            stmt.setString(3, nurseLogin);
            stmt.setString(4, date);
            stmt.executeUpdate();

            System.out.println("‚úÖ –ü–æ—Ä—É—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è nurse1");

        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è: " + e.getMessage());
        }
    }
    public static void showMedAssistantMenu(String name) {
        Scanner scanner = new Scanner(System.in);
        int choice;

        while (true) {
            System.out.println("\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–µ–¥—Å–µ—Å—Ç—Ä–∞ " + name + "!");
            System.out.println("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä");
            System.out.println("2. –ù–∞–π—Ç–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞");
            System.out.println("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—É—á–µ–Ω–∏–π");
            System.out.println("4. –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Ä—É—á–µ–Ω–∏–µ");
            System.out.println("5. –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ—Ä—É—á–µ–Ω–∏—è");
            System.out.println("6. –í—ã—Ö–æ–¥");
            System.out.print("–í–∞—à –≤—ã–±–æ—Ä: ");

            try {
                choice = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
                continue;
            }

            switch (choice) {
                case 1 -> NurseService.showProcedures();
                case 2 -> NurseService.findPatient();
                case 3 -> NurseService.showTasks();
                case 4 -> NurseService.completeTask();
                case 5 -> NurseService.showCompletedTasks();
                case 6 -> {
                    System.out.println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
                    return;
                }
                default -> System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
            }
        }
    }
    public static void showMainDoctorMenu(String name) {
        Scanner scanner = new Scanner(System.in);
        int choice;

        while (true) {
            System.out.println("\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≥–ª–∞–≤–≤—Ä–∞—á " + name + "!");
            System.out.println("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ–¥—Å–µ—Å—Ç—ë—Ä");
            System.out.println("2. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ª–µ—á–∞—â–∏—Ö –≤—Ä–∞—á–µ–π");
            System.out.println("3. –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤");
            System.out.println("4. –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π");
            System.out.println("5. –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π");
            System.out.println("6. –í—ã—Ö–æ–¥");
            System.out.print("–í–∞—à –≤—ã–±–æ—Ä: ");

            try {
                choice = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
                continue;
            }

            switch (choice) {
                case 1 -> ChiefDoctorService.showNurses();
                case 2 -> ChiefDoctorService.showDoctors();
                case 3 -> ChiefDoctorService.countPatients();
                case 4 -> ChiefDoctorService.showMaxSalary();
                case 5 -> ChiefDoctorService.showMinSalary();
                case 6 -> {
                    System.out.println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
                    return;
                }
                default -> System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
            }
        }
    }
    public static void showPatientMenu(String login) {
        Scanner scanner = new Scanner(System.in);
        int choice;

        System.out.println("–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: " + login);

        while (true) {
            System.out.println("\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ø–∞—Ü–∏–µ–Ω—Ç!");
            System.out.println("1. –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–æ–ª–µ–∑–Ω–∏");
            System.out.println("2. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –±–æ–ª–µ–∑–Ω–∏");
            System.out.println("3. –ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–∏ –ª–µ—á–µ–Ω–∏—è");
            System.out.println("4. –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–∞—á–µ–π");
            System.out.println("5. –ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é");
            System.out.println("6. –í—ã—Ö–æ–¥");
            System.out.print("–í–∞—à –≤—ã–±–æ—Ä: ");

            try {
                choice = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.");
                continue;
            }

            switch (choice) {
                case 1 -> PatientService.showHistory(login);
                case 2 -> PatientService.showLastDate(login);
                case 3 -> PatientService.showTreatmentDays(login);
                case 4 -> PatientService.showSchedule();
                case 5 -> PatientService.showPersonalInfo(login);
                case 6 -> {
                    System.out.println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
                    return;
                }
                default -> System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
            }
        }
    }
    public static void debugShowAllMedicalHistory() {
        System.out.println("----- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ medical_history -----");
        String sql = "SELECT * FROM medical_history";

        try (Connection conn = DatabaseManager.connect();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                System.out.println("ID: " + rs.getInt("id") +
                        " | –õ–æ–≥–∏–Ω: " + rs.getString("patient_login") +
                        " | –î–∞—Ç–∞: " + rs.getString("date") +
                        " | –î–∏–∞–≥–Ω–æ–∑: " + rs.getString("diagnosis"));
            }

        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }
    public static void debugShowAllTasks() {
        System.out.println("------ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á ------");
        String sql = "SELECT * FROM tasks";

        try (Connection conn = DatabaseManager.connect();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                System.out.println("ID: " + rs.getInt("id") +
                        " | –û–ø–∏—Å–∞–Ω–∏–µ: " + rs.getString("description") +
                        " | –î–æ–∫—Ç–æ—Ä: " + rs.getString("doctor_login") +
                        " | –ú–µ–¥—Å–µ—Å—Ç—Ä–∞: " + rs.getString("nurse_login") +
                        " | –°—Ç–∞—Ç—É—Å: " + rs.getString("status"));
            }

        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }
    public static void deleteAllMedicalHistoryFor(String login) {
        String sql = "DELETE FROM medical_history WHERE patient_login = ?";

        try (Connection conn = DatabaseManager.connect();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, login);
            int rows = stmt.executeUpdate();
            System.out.println("‚úÖ –£–¥–∞–ª–µ–Ω–æ –¥–∏–∞–≥–Ω–æ–∑–æ–≤: " + rows);

        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: " + e.getMessage());
        }
    }
    public static void deleteAllTasks() {
        try (Connection conn = DatabaseManager.connect();
             Statement stmt = conn.createStatement()) {

            stmt.execute("DELETE FROM tasks");
            System.out.println("‚úÖ –í—Å–µ –ø–æ—Ä—É—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.");

        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á: " + e.getMessage());
        }
    }
    public static void deleteAllProcedures() {
        try (Connection conn = DatabaseManager.connect();
             Statement stmt = conn.createStatement()) {

            stmt.execute("DELETE FROM procedures");
            System.out.println("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —É–¥–∞–ª–µ–Ω—ã.");

        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä: " + e.getMessage());
        }
    }
    public static void showPatientCount() {
        String sql = "SELECT COUNT(*) AS count FROM patients";

        try (Connection conn = DatabaseManager.connect();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            if (rs.next()) {
                System.out.println("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: " + rs.getInt("count"));
            } else {
                System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.");
            }

        } catch (Exception e) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: " + e.getMessage());
        }
    }

    public static void showActiveNurseTasks() {
        String sql = "SELECT * FROM tasks WHERE status = 'pending'";
        try (Connection conn = DatabaseManager.connect();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            System.out.println("\n–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ä—É—á–µ–Ω–∏–π –º–µ–¥—Å–µ—Å—Ç—Ä–∞–º:");
            boolean found = false;
            while (rs.next()) {
                System.out.println("- " + rs.getString("description") + " (–¥–ª—è: " + rs.getString("nurse_login") + ")");
                found = true;
            }
            if (!found) {
                System.out.println("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ä—É—á–µ–Ω–∏–π.");
            }

        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: " + e.getMessage());
        }
    }

    public static void showCompletedNurseTasks() {
        String sql = "SELECT * FROM tasks WHERE status = 'done'";
        try (Connection conn = DatabaseManager.connect();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            System.out.println("\n–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–æ—Ä—É—á–µ–Ω–∏—è –º–µ–¥—Å–µ—Å—Ç—ë—Ä:");
            boolean found = false;
            while (rs.next()) {
                System.out.println("- " + rs.getString("description") + " (–≤—ã–ø–æ–ª–Ω–∏–ª–∞: " + rs.getString("nurse_login") + ")");
                found = true;
            }
            if (!found) {
                System.out.println("–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–æ—Ä—É—á–µ–Ω–∏–π.");
            }

        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: " + e.getMessage());
        }
    }
    public static void deleteAllStaff() {
        try (Connection conn = DatabaseManager.connect();
             Statement stmt = conn.createStatement()) {

            stmt.execute("DELETE FROM staff");
            System.out.println("‚úÖ –¢–∞–±–ª–∏—Ü–∞ staff –æ—á–∏—â–µ–Ω–∞.");

        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ staff: " + e.getMessage());
        }
    }

}
